openapi: 3.0.2

servers:
  - url: 'https://api.solvice.io/'
    description: Production cluster

info:
  version: "1.1"
  title: OnStock API
  x-logo:
    url: 'logo.png'
    altText: OnStock API
  description: |

    Welcome to the Solvice API! You can use our API to access Solvice API endpoints,
    which can get information on your solved jobs,
    their statuses and of course post new solve jobs.

    # Inventory Optimisation


    OnStock is a solver engine for solving multi-echelon inventory optimisation problems through the Solvice Optimisation API Platform.

    Creating optimal inventory planning for your multi-echelon supply chain, based on the characteristics of your network and your customers' demand.


    The Solvice Inventory Optimisation API consists of the following RESTful web services:
     * [Base Stock API](#section/Capacity-planning)
     * [RQ Planning API](#section/Shift-scheduling)

    ### Getting started
     1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onstock/register) to get one.
     2. Read the documentation of the desired API below.
     3. Start using the API.

    ### Overview

    > Test our API in just one command

     ```shell
     curl https://demo:demo@api.solvice.io/demo/stock/base | \
     curl https://demo:demo@api.solvice.io/v1/solve  \
          -X POST -H "Content-Type: application/json" -d @-
     ```

     >You can copy and paste the above in your terminal for a working example. The example uses a randomly generated base stock problem.



     The Solvice API is super simple! Basically, it holds one [/solve](#solve-endpoint)  endpoint for sending an asynchronous solve request to for a certain optimization problem and it holds one [/jobs/:job_id/solution](#jobs-endpoint)  endpoint for retrieving the solved job asynchronous. That's it!
     The only thing you have to manage is the actual payload for the solve request.



    The OnStock API is as simple as it gets. There are only several important endpoints:

     1. Solving an OnStock optimisation problem is as simple as an POST to our `/solve` endpoint.
     2. The Job `id` is returned.
     3. Check for the status of that job whether it is solved yes with the GET `/jobs/<id>/status` endpoint.
     4. If so, then fetch the solution with a simple GET on `/jobs/<id>/solution`

    To use our OnStock API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onstock/api#pricing).

    ### Problems or Questions?
    If you have problems or questions, we offer you the following options:
     * [FAQ](https://www.solvice.io/faq)
     * [Open ticket]()
     * [Contact us](https://www.solvice.io/contact)


tags:
  - name: Inventory Optimisation
    description: |

      OnStock can solve different network inventory placement problems.

      ## Base Stock planning
      Creating an optimal inventory policy for your supply chain based on the demand and supply characteristics of your network.

      ### Network characteristics
      The input requires you to provide:

       - the nodes in your network

      #### Node
      A node definition should characterize the position of the node in the network, the processing steps that are taken at this node and 
      the demand characteristics (if a node supplies an external demand.)

      ```json
      {
          "name": "Final Assembly",
          "index": 0,
          "nominalTime": 4,
          "cost": 8000,
          "successors": [],
          "avgCustomerDemand": 5,
          "sdCustomerDemand": 3
      }
      ```

      #### ServiceTimeAssignments

      The service time assignments represent the solution. In the GSM (Guaranteed Service Model) definition of the multi-echelon
      inventory placement problem the outgoing service time in each node is to be decided. From this outgoing service time, the holding cost 
      for each node follows.


      ```json
      {
         "id": 1,
         "node": "Final Assembly",
         "outgoingServiceTime" : 0
       }
      ```

      #### OrderSizeAssignments

      The service time assignments represent the solution. In the GSM (Guaranteed Service Model) definition of the multi-echelon
      inventory placement problem the outgoing service time in each node is to be decided. From this outgoing service time, the holding cost
      for each node follows.


      ```json
      {
         "id": 1,
         "node": "Final Assembly",
         "orderSize" : 2
       }
      ```


      ### Output

      Simply fetch the solution in the `jobs/:id/solution` endpoint and receive the GSM outgoingServiceTime assignments.


      ```json
      [
        {
         "id": 1,
         "node": "Final Assembly",
         "outgoingServiceTime" : 0
       }
      ]
      ```

  - name: Jobs
    description: The Jobs endpoint allows to retrieve information of a posted request, its status, the score or even detailed statistics.


  - name: Inventory placement
    description: |
      It is possible to generate the planning by doing a `solve` or either `evaluate` a current solution by doing a `evaluate`.
      Post a new solve request to the Inventory Optimisation Engine.

      The optimisation engine can accept different problems:
       - BASE_STOCK: `BaseRequest`
       - RQ_STOCK: `RQRequest`

  - name: Solution
    description: Retrieve the optimal solution to the problem.
  - name: FAQ
    description: |




security:
  - ApiKey: [ ]

paths:
  /solve:
    post:
      tags:
        - Inventory placement
      summary: Solve problem
      operationId: solve
      parameters:
        - in: query
          name: seconds
          example: 20
          schema:
            type: integer
          description: The number of seconds you give the solver to optimise the problem. By default, the solver decides.

      description: |
        Endpoint for solving inventory optimisation problem. OnStock performs Multi Echelon Inventory Optimization (MEIO).
        In contrast to the single echelon approximation that looks at nodes separately, here, the supply chain is seen as a whole.
        OnStock implements the Guaranteed Service Model, which considers the processing times and the demands in a supply network to be deterministic.

        There are multiple possible problems:
         1. Base stock placement: `BASE_STOCK` solver to send a `BaseRequest`
         2. RQ planning: `RQ_STOCK` solver to send an `RQRequest`

        References: [Solvice documentation](/docs/onstock-overview), [Long form documentation](https://github.com/solvice/OnStock-documentation), [Inventory Optimization](https://en.wikipedia.org/wiki/Inventory_optimization), [Base stock model](https://en.wikipedia.org/wiki/Base_stock_model), [RQ model](https://en.wikipedia.org/wiki/(Q,r)_model)
      requestBody:
        description: |
          Payload for all information concerning the inventory problem.
          This includes:
           - the nodes
        required: true
        content:
          application/json:
            examples:
              BASE_STOCK:
                summary: Base stock placement
                value:
                  $ref: ./onstock/examples/base.json
              RQ_STOCK:
                summary: RQ stock placement
                value:
                  $ref: ./onstock/examples/rq.json
            schema:
              oneOf:
                - $ref: '#/components/schemas/BaseRequest'
                - $ref: '#/components/schemas/RQRequest'
              discriminator:
                propertyName: solver
                mapping:
                  BASE_STOCK: '#/components/schemas/BaseRequest'
                  RQ_STOCK: '#/components/schemas/RQRequest'


      responses:
        '200':
          description: solve job accepted to queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusJob'
        '400':
          $ref: '#/components/responses/WrongFormat'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /evaluate:
    post:
      tags:
        - Inventory placement
      summary: Evaluate problem
      operationId: evaluate
      description: Endpoint for evaluating optimisation problem.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/BaseRequest'
                - $ref: '#/components/schemas/RQRequest'

      responses:
        '200':
          description: Job valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusJob'
        '400':
          $ref: '#/components/responses/WrongFormat'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/jobs/{jobId}':
    get:
      tags:
        - Jobs
      summary: Job
      operationId: getJob
      description: When posting a new solve request, this job can be checked again under this endpoint.
        In fact, it should be the entire request posted as-is.
      parameters:
        - in: path
          name: jobId
          required: true
          description: The job ID.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return a job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusJob'
        '404':
          description: 'Job not found'

  /v1/stats/{jobId}:
    get:
      tags:
        - Jobs
      summary: Statistics
      operationId: getStats
      parameters:
        - in: path
          name: jobId
          required: true
          description: The job ID.
          schema:
            type: string
            format: uuid
      description: |
        Returns the information on why a job has been solved the way it's been.
        Information includes specific unresolved objects. Want to know how it is optimised? This endpoint lets you know what rules have been overruled.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        '404':
          description: 'Job not found'

  /jobs/{jobId}/status:
    get:
      tags:
        - Jobs
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          schema:
            type: string
            format: uuid
      summary: Get a status
      operationId: getStatus
      responses:
        '200':
          description: get job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusJob'
        '400':
          description: bad input parameter

  /jobs/{jobId}/solution:
    get:
      tags:
        - Solution
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          schema:
            type: string
            format: uuid
      summary: Get a solution
      operationId: getSolution
      responses:
        '200':
          description: Valid Job
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - $ref: '#/components/schemas/RQResponse'
                discriminator:
                  propertyName: solver
                  mapping:
                    BASE_STOCK: '#/components/schemas/BaseResponse'
                    RQ_STOCK: '#/components/schemas/RQResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  schemas:
    BaseRequest:
      allOf: # Combines the SolveJob and the inline model
        - $ref: '#/components/schemas/SolveJob'
        - type: object
          required:
            - nodes
          properties:
            networkNodes:
              type: array
              description: Node characteristics from your network.
              items:
                $ref: '#/components/schemas/Node'
            serviceTimeAssignments:
              type: array
              description: Pre made assignments that the solver should take into account.
              items:
                $ref: '#/components/schemas/ServiceTimeAssignment'
            options:
              type: object
              description: Model parameters for cost calculation, demand calculation and calculation bounds.
              properties:
                holdingRate:
                  type: number
                  example: 0.25
                  description: Expression of how expensive it is to hold a good relative to its cost.
                distribution:
                  type: string
                  enum:
                    - NORMAL
                    - POISSON
                  example: NORMAL
                  description: Demand profile.
                maxMovingRateCalculation:
                  type: integer
                  example: 125
                  description: For Poisson profiles, the maximal rate for which the solver performs exact calculations. Higher rates are approximated.
                maxOutGoingServiceTimeOffset:
                  type: integer
                  example: 26
                  description: The highest possible outgoing service time of a node is the sum of its processing time and this value.



    BaseResponse:
          allOf: # Combines the SolveJob and the inline model
            - $ref: '#/components/schemas/Solution'
            - type: object
              properties:
                serviceTimeAssignments:
                  type: array
                  description: Pre made assignments that the solver should take into account.
                  items:
                    $ref: '#/components/schemas/ServiceTimeAssignment'
                options:
                  type: object
                  description: Model parameters for cost calculation, demand calculation and calculation bounds.
                  properties:
                    holdingRate:
                      type: number
                      description: Expression of how expensive it is to hold a good relative to its cost.
                    distribution:
                      type: string
                      enum:
                        - NORMAL
                        - POISSON
                      example: NORMAL
                      description: Demand profile.
                    maxMovingRateCalculation:
                      type: integer
                      description: For Poisson profiles, the maximal rate for which the solver performs exact calculations. Higher rates are approximated.
                    maxOutGoingServiceTimeOffset:
                      type: integer
                      description: The highest possible outgoing service time of a node is the sum of its processing time and this value.
                solution:
                  type: array
                  description: List of the node solutions.
                  items:
                    $ref: '#/components/schemas/NodeSolution'


    RQRequest:
      allOf: # Combines the SolveJob and the inline model
        - $ref: '#/components/schemas/SolveJob'
        - type: object
          required:
            - nodes
          properties:
            serviceTimeAssignments:
              type: array
              description: Pre made assignments that the solver should take into account
              items:
                $ref: '#/components/schemas/ServiceTimeAssignment'
            orderSizeAssignments:
              type: array
              description: Pre made assignments that the solver should take into account
              items:
                $ref: '#/components/schemas/OrderSizeAssignment'
            rqOptions:
              type: object
              description: Model parameters for cost calculation, demand calculation and calculation bounds.
              properties:
                holdingRate:
                  type: number
                  example: 0.25
                  description: Expression of how expensive it is to hold a good relative to its cost.
                distribution:
                  type: string
                  enum:
                    - NORMAL
                    - POISSON
                  example: NORMAL
                  description: Demand profile.
                maxMovingRateCalculation:
                  type: integer
                  example: 125
                  description: For Poisson profiles, the maximal rate for which the solver performs exact calculations. Higher rates are approximated.
                maxOutGoingServiceTimeOffset:
                  type: integer
                  example: 26
                  description: The highest possible outgoing service time of a node is the sum of its processing time and this value.
                maxOrderSizeWeekFactor:
                  type: integer
                  example: 12
                  description: The order size of a node is capped by the product of its average demand per week and this factor.


    RQResponse:
          allOf:
            - $ref: '#/components/schemas/Solution'
            - type: object
              properties:
                networkNodes:
                  type: array
                  description: Node characteristics from your network.
                  items:
                    $ref: '#/components/schemas/RQNode'
                serviceTimeAssignments:
                  type: array
                  description: Assignments for the service times of nodes the solver was fed or decided on
                  items:
                    $ref: '#/components/schemas/ServiceTimeAssignment'
                orderSizeAssignments:
                  type: array
                  description: Assignments for the order sizes of nodes the solver was fed or decided on
                  items:
                    $ref: '#/components/schemas/OrderSizeAssignment'
                rqOptions:
                  type: object
                  description: Model parameters for cost calculation, demand calculation and calculation bounds.
                  properties:
                    holdingRate:
                      type: number
                      description: Expression of how expensive it is to hold a good relative to its cost.
                    distribution:
                      type: string
                      enum:
                        - NORMAL
                        - POISSON
                      example: NORMAL
                      description: Demand profile.
                    maxMovingRateCalculation:
                      type: integer
                      description: For Poisson profiles, the maximal rate for which the solver performs exact calculations. Higher rates are approximated.
                    maxOutGoingServiceTimeOffset:
                      type: integer
                      description: The highest possible outgoing service time of a node is the sum of its processing time and this value.
                    maxOrderSizeWeekFactor:
                      type: integer
                      description: The largest possible order size of a node is the product of its average demand and this value.
                solution:
                  type: array
                  description: List of the node solutions.
                  items:
                    $ref: '#/components/schemas/RQNodeSolution'


    SolveJob:
      type: object
      required:
        - solver
      properties:
        solver:
          $ref: '#/components/schemas/Solver'
        hook:
          type: string
          format: uri
          description: Webhook returns solution status after solving in the form of a POST request to the uri given.

    Solution:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/JobId'
        solver:
          $ref: '#/components/schemas/Solver'
        status:
          $ref: '#/components/schemas/Status'
        score:
          $ref: '#/components/schemas/Score'
        unresolved:
          type: array
          description: The unresolved constraints show the list of constraints that could not achieve feasibility for the current solve.
          items:
            type: object
            properties:
              name:
                description: Name of the constraint.
                type: string
              value:
                description: Value of the unresolved constraint. The higher, the more deviation from perfection this constraint has.
                type: integer
              level:
                description: Level of unresolved constraint.
                type: string
                enum:
                  - HARD
                  - SOFT
                  - MEDIUM

    Error:
      type: object
      properties:
        error:
          type: string
        description:
          type: string

    ErrorCode:
      type: object
      properties:
        errorCode:
          type: string
        explanation:
          type: string
        line:
          type: integer
        column:
          type: integer

    Status:
      type: string
      enum:
        - QUEUED
        - SOLVING
        - SOLVED
        - ERROR
      example: "SOLVING"
      description: The current status of the job. After arriving at the solver engine, it gets `QUEUED` to the right solver, then processed (`SOLVING`) and when finished the status is `SOLVED`.

    Solver:
      type: string
      enum:
        - BASE_STOCK
        - RQ_STOCK
      example: "BASE_STOCK"

    Score:
      description: The score of a solution shows how good this solution is w.r.t all the constraints.
      type: object
      properties:
        hardScore:
          type: integer
          description: The score of the constraints that are hard. This should be 0 in order to be feasible.
        mediumScore:
          type: integer
          description: The score of the constraints that are medium.
        softScore:
          type: integer
          description: The score of the constraints that are soft.
        feasible:
          type: boolean
          description: Feasibility check on hard constraints. Check unresolved parameter if you cannot reach feasibility.

    Node:
      description: The characteristics of the nodes describing your network.
      type: object
      required:
        - name
        - nominalTime
        - cost
      properties:
        name:
          type: string
          example: "Final Assembly"
          description: Unique name for the network node.
        nominalTime:
          type: integer
          example: 2
          description: The processing time for this node.
        cost:
          type: number
          example: 5
          description: The incremental cost of the processing in this node.
        serviceLevel:
          type: number
          example: 0.9
          description: The serviceLevel that is taken into account in the calculation of the demand bound for this node.
        successors:
          type: array
          description: The network nodes that succeed this node directly.
          items:
            type: string
            description: The names of the succeeding nodes.
        avgCustomerDemand:
          type: number
          example: 52000
          description: The average demand that needs to be sourced to a customer. This should only be filled in for a customer node (i.e. which has no successors in the network).
        sdCustomerDemand:
          type: number
          example: 3000
          description: The standard deviation of the demand that needs to be sourced to a customer. This should only be filled in for a customer node (i.e. which has no successors in the network).

    NodeSolution:
      description: The solution characteristics of the nodes describing your network.
      type: object
      properties:
        node:
          type: string
          description: Name of the node.
        safetyStock:
          type: integer
          description: Amount of safety stock that should be kept at this node.
        netLeadTime:
          type: integer
          description: The value that was used to calculate safety stock for this node.
        holdingCostSS:
          type: integer
          description: The holding cost that stems from the safety stock.




    RQNode:
      description: The characteristics of the nodes describing your network.
      type: object
      required:
        - name
        - nominalTime
        - cost
        - fixedOrderCost
      properties:
        name:
          type: string
          example: "Final Assembly"
          description: Unique name for the network node.
        nominalTime:
          type: integer
          example: 2
          description: The processing time for this node.
        cost:
          type: number
          example: 5
          description: The incremental cost of the processing in this node.
        serviceLevel:
          type: number
          example: 0.9
          description: The serviceLevel that is taken into account in the calculation of the demand bound for this node.
        successors:
          type: array
          description: The network nodes that succeed this node directly.
          items:
            type: string
            description: The names of the succeeding nodes.
        avgCustomerDemand:
          type: number
          example: 52000
          description: The average demand that needs to be sourced to a customer. This should only be filled in for a customer node (i.e. which has no successors in the network).
        sdCustomerDemand:
          type: number
          example: 3000
          description: The standard deviation of the demand that needs to be sourced to a customer. This should only be filled in for a customer node (i.e. which has no successors in the network).
        orderSizeStep:
          type: integer
          example: 10
          description: The minimal batch order size increment.
        orderSizeMax:
          type: integer
          example: 1000
          description: The maximal batch order size.
        fixedOrderCost:
          type: integer
          example: 500
          description: The cost of ordering in this node.

    RQNodeSolution:
      description: The solution characteristics of the nodes describing your network.
      type: object
      properties:
        node:
          type: string
          description: Name of the node.
        safetyStock:
          type: integer
          description: Amount of safety stock that should be kept at this node.
        netLeadTime:
          type: integer
          description: The value that was used to calculate safety stock for this node.
        holdingCostSS:
          type: integer
          description: The holding cost that stems from the safety stock.
        orderSize:
          type: integer
          description: The value of Q on which the solver decided for this node.
        orderCost:
          type: integer
          description: The order cost of this node.
        holdingCostQ:
          type: integer
          description: The holding cost that stems from the order size.

    ServiceTimeAssignment:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique id
        outgoingServiceTime:
          example: 0
          type: integer
        node:
          type: string
          example: Final Assembly
          description: The name of the node for which the outgoingServiceTime is given.

    OrderSizeAssignment:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique id
        orderSize:
          example: 1
          type: integer
        node:
          type: string
          description: The node for which the orderSize is given.


    Stats:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        goals:
          type: array
          description: List of unresolved goals.
          items:
            type: object
            properties:
              goal:
                type: string
                description: Goal name
              weight:
                type: integer
                description: Weight total for goal.
              conflicts:
                type: array
                items:
                  type: object
                  properties:
                    weight:
                      type: integer
                      description: Specific weight for unresolved goal reasons.
                    reasons:
                      type: array
                      items:
                        type: string
    JobId:
      type: string
      format: uuid
      description: Job ID


    SolutionJob:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/JobId'
        solver:
          $ref: '#/components/schemas/Solver'
        status:
          $ref: '#/components/schemas/Status'
        score:
          $ref: '#/components/schemas/Score'


    StatusJob:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/JobId'
        solver:
          type: string
          description: Solver type
        status:
          $ref: '#/components/schemas/Status'

  securitySchemes:

    ApiKey:
      type: apiKey
      in: header
      name: Authorization

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    WrongFormat:
      description: Wrong format
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorCode'



